type: 10014
name: LensFlare
slot: Appearance
meta:
  isAppearance: true
  isParticle: false
desc: |
  Creates lens flares with up to 4 textured layers with different colors and sizes.
properties:
  layer1Width:
    type: ScalarValue
    default: 1
    scale: instanceSize
    desc: |
      Layer 1 width.
  layer1Height:
    type: ScalarValue
    default: 1
    scale: instanceSize
    desc: |
      Layer 1 height.
  layer1Color:
    type: Vector4Value
    components: 4
    default: [1, 1, 1, 1]
    color: primary
    desc: |
      Layer 1 color.
  layer2Width:
    type: ScalarValue
    default: 1
    scale: instanceSize
    desc: |
      Layer 2 width.
  layer2Height:
    type: ScalarValue
    default: 1
    scale: instanceSize
    desc: |
      Layer 2 height.
  layer2Color:
    type: Vector4Value
    components: 4
    default: [1, 1, 1, 1]
    color: primary
    desc: |
      Layer 2 color.
  layer3Width:
    type: ScalarValue
    default: 1
    scale: instanceSize
    desc: |
      Layer 3 width.
  layer3Height:
    type: ScalarValue
    default: 1
    scale: instanceSize
    desc: |
      Layer 3 height.
  layer3Color:
    type: Vector4Value
    components: 4
    default: [1, 1, 1, 1]
    color: primary
    desc: |
      Layer 3 color.
  layer4Width:
    type: ScalarValue
    default: 1
    scale: instanceSize
    desc: |
      Layer 4 width.
  layer4Height:
    type: ScalarValue
    default: 1
    scale: instanceSize
    desc: |
      Layer 4 height.
  layer4Color:
    type: Vector4Value
    components: 4
    default: [1, 1, 1, 1]
    color: primary
    desc: |
      Layer 4 color.
  layer1:
    field: int
    default: 1
    resource: texture
    textureType: a
    desc: |
      Layer 1 texture ID.
  layer2:
    field: int
    default: 0
    resource: texture
    textureType: a
    desc: |
      Layer 2 texture ID.
  layer3:
    field: int
    default: 0
    resource: texture
    textureType: a
    desc: |
      Layer 3 texture ID.
  layer4:
    field: int
    default: 0
    resource: texture
    textureType: a
    desc: |
      Layer 4 texture ID.

      This layer seems to work a bit differently from the others in Sekiro.
  blendMode:
    type: BlendMode
    field: int
    enum: BlendMode
    default: BlendMode.Add
    desc: |
      Blend mode.
  unk_er_f1_4:
    field: int
  sourceSize:
    field: float
    default: 1
    desc: |
      Diameter of the lens flare source sphere.

      The opacity of the lens flare depends on how much of the source is in view.
  opacityTransitionDuration:
    field: float
    default: 1
    desc: |
      The time in seconds it takes for the opacity of the lens flare to transition when the source comes more into or goes more out of view.
  unk_er_f1_8:
    field: int
  layer1Count:
    field: int
    default: 1
    desc: |
      The number of flares to create from {@link layer1}. Unless given {@link layer1OffsetVariation random offsets}, they will all just stack on top of each other in the same spot.

      Setting it to very high values can have a significant impact on performance.
    see:
      - layer1ScaleVariationX
      - layer1ScaleVariationY
      - layer1Reflection
      - layer1Offset
      - layer1OffsetVariation
  layer1ScaleVariationX:
    field: float
    default: 1
    desc: |
      The {@link layer1Width width} of {@link layer1Count each flare} is multiplied by a random value between this and 1.
    see:
      - layer1Count
      - layer1UniformScale
      - layer1ScaleVariationY
  layer1ScaleVariationY:
    field: float
    default: 1
    desc: |
      The {@link layer1Height height} of {@link layer1Count each flare} is multiplied by a random value between this and 1.
    see:
      - layer1Count
      - layer1UniformScale
      - layer1ScaleVariationX
  layer1UniformScale:
    field: bool
    default: false
    desc: |
      When enabled, the {@link layer1Width layer's width} also controls the {@link layer1Height height}, and the height property is ignored. The same is also true for the scale variation fields.
    see:
      - layer1Width
      - layer1Height
      - layer1ScaleVariationX
      - layer1ScaleVariationX
  layer1ColorMultiplier:
    field: vec4
    components: 4
    default: [1, 1, 1, 1]
    color: true
    desc: |
      Multiplier for the {@link layer1Color layer's color}.
    see:
      - layer1Color
  layer1Reflection:
    field: int
    enum: ReflectionMode
    default: ReflectionMode.None
    desc: |
      Controls how the offset vector is calculated for {@link layer1}. See {@link ReflectionMode} for more details.
    see:
      - layer1Offset
      - layer1OffsetVariation
  layer1Offset:
    field: float
    desc: |
      Controls where the lens flare(s) from {@link layer1} will appear on the screen relative to the source and the center of the screen.

      This is basically a scalar multiplier for the {@link layer1Reflection offset vector}.

      This requires {@link layer1Reflection} to not be set to {@link ReflectionMode.None}.
    see:
      - layer1Reflection
      - layer1OffsetVariation
      - layer1AttenuationRadius
  layer1OffsetVariation:
    field: float
    default: 1
    desc: |
      For {@link layer1Count each flare} of {@link layer1}, a random number is picked between this value and 1, and this random number is then multiplied with {@link layer1Offset} to get the final offset for the flare.

      This requires {@link layer1Reflection} to not be set to {@link ReflectionMode.None}.
    see:
      - layer1Reflection
      - layer1Offset
  layer1AttenuationRadius:
    field: float
    default: -1
    desc:
      This controls the radius of a sphere around the source for {@link layer1}. {@link layer1Count Each flare} has its own radius, which calculated by dividing this radius by the absolute value of the flare's {@link layer1Offset offset}. If the center of the screen is not within the projection of this sphere on the screen, the flare will not be visible, and it fades out gradually as the center of the screen moves from within the sphere to outside it.

      In other words, this fades out flares based on their offset and the distance from the source to the center of the screen, which means it's harder to see flares farther away from the source, and if the source is far away from the center of the screen.

      Can be set to -1 to disable this limit and always display the flare(s).
    see:
      - layer1Reflection
      - layer1Offset
      - layer1OffsetVariation
  layer2Count:
    field: int
    default: 1
    desc: |
      The number of flares to create from {@link layer2}. Unless given {@link layer2OffsetVariation random offsets}, they will all just stack on top of each other in the same spot.

      Setting it to very high values can have a significant impact on performance.
    see:
      - layer2ScaleVariationX
      - layer2ScaleVariationY
      - layer2Reflection
      - layer2Offset
      - layer2OffsetVariation
  layer2ScaleVariationX:
    field: float
    default: 1
    desc: |
      The {@link layer2Width width} of {@link layer2Count each flare} is multiplied by a random value between this and 1.
    see:
      - layer2Count
      - layer2UniformScale
      - layer2ScaleVariationY
  layer2ScaleVariationY:
    field: float
    default: 1
    desc: |
      The {@link layer2Height height} of {@link layer2Count each flare} is multiplied by a random value between this and 1.
    see:
      - layer2Count
      - layer2UniformScale
      - layer2ScaleVariationX
  layer2UniformScale:
    field: bool
    default: false
    desc: |
      When enabled, the {@link layer2Width layer's width} also controls the {@link layer2Height height}, and the height property is ignored. The same is also true for the scale variation fields.
    see:
      - layer2Width
      - layer2Height
      - layer2ScaleVariationX
      - layer2ScaleVariationX
  layer2ColorMultiplier:
    field: vec4
    components: 4
    default: [1, 1, 1, 1]
    color: true
    desc: |
      Multiplier for the {@link layer2Color layer's color}.
    see:
      - layer2Color
  layer2Reflection:
    field: int
    enum: ReflectionMode
    default: ReflectionMode.None
    desc: |
      Controls how the offset vector is calculated for {@link layer2}. See {@link ReflectionMode} for more details.
    see:
      - layer2Offset
      - layer2OffsetVariation
  layer2Offset:
    field: float
    desc: |
      Controls where the lens flare(s) from {@link layer2} will appear on the screen relative to the source and the center of the screen.

      This is basically a scalar multiplier for the {@link layer2Reflection offset vector}.

      This requires {@link layer2Reflection} to not be set to {@link ReflectionMode.None}.
    see:
      - layer2Reflection
      - layer2OffsetVariation
      - layer2AttenuationRadius
  layer2OffsetVariation:
    field: float
    default: 1
    desc: |
      For {@link layer2Count each flare} of {@link layer2}, a random number is picked between this value and 1, and this random number is then multiplied with {@link layer2Offset} to get the final offset for the flare.

      This requires {@link layer2Reflection} to not be set to {@link ReflectionMode.None}.
    see:
      - layer2Reflection
      - layer2Offset
  layer2AttenuationRadius:
    field: float
    default: -1
    desc:
      This controls the radius of a sphere around the source for {@link layer2}. {@link layer2Count Each flare} has its own radius, which calculated by dividing this radius by the absolute value of the flare's {@link layer2Offset offset}. If the center of the screen is not within the projection of this sphere on the screen, the flare will not be visible, and it fades out gradually as the center of the screen moves from within the sphere to outside it.

      In other words, this fades out flares based on their offset and the distance from the source to the center of the screen, which means it's harder to see flares farther away from the source, and if the source is far away from the center of the screen.

      Can be set to -1 to disable this limit and always display the flare(s).
    see:
      - layer2Reflection
      - layer2Offset
      - layer2OffsetVariation
  layer3Count:
    field: int
    default: 1
    desc: |
      The number of flares to create from {@link layer3}. Unless given {@link layer3OffsetVariation random offsets}, they will all just stack on top of each other in the same spot.

      Setting it to very high values can have a significant impact on performance.
    see:
      - layer3ScaleVariationX
      - layer3ScaleVariationY
      - layer3Reflection
      - layer3Offset
      - layer3OffsetVariation
  layer3ScaleVariationX:
    field: float
    default: 1
    desc: |
      The {@link layer3Width width} of {@link layer3Count each flare} is multiplied by a random value between this and 1.
    see:
      - layer3Count
      - layer3UniformScale
      - layer3ScaleVariationY
  layer3ScaleVariationY:
    field: float
    default: 1
    desc: |
      The {@link layer3Height height} of {@link layer3Count each flare} is multiplied by a random value between this and 1.
    see:
      - layer3Count
      - layer3UniformScale
      - layer3ScaleVariationX
  layer3UniformScale:
    field: bool
    default: false
    desc: |
      When enabled, the {@link layer3Width layer's width} also controls the {@link layer3Height height}, and the height property is ignored. The same is also true for the scale variation fields.
    see:
      - layer3Width
      - layer3Height
      - layer3ScaleVariationX
      - layer3ScaleVariationX
  layer3ColorMultiplier:
    field: vec4
    components: 4
    default: [1, 1, 1, 1]
    color: true
    desc: |
      Multiplier for the {@link layer3Color layer's color}.
    see:
      - layer3Color
  layer3Reflection:
    field: int
    enum: ReflectionMode
    default: ReflectionMode.None
    desc: |
      Controls how the offset vector is calculated for {@link layer3}. See {@link ReflectionMode} for more details.
    see:
      - layer3Offset
      - layer3OffsetVariation
  layer3Offset:
    field: float
    desc: |
      Controls where the lens flare(s) from {@link layer3} will appear on the screen relative to the source and the center of the screen.

      This is basically a scalar multiplier for the {@link layer3Reflection offset vector}.

      This requires {@link layer3Reflection} to not be set to {@link ReflectionMode.None}.
    see:
      - layer3Reflection
      - layer3OffsetVariation
      - layer3AttenuationRadius
  layer3OffsetVariation:
    field: float
    default: 1
    desc: |
      For {@link layer3Count each flare} of {@link layer3}, a random number is picked between this value and 1, and this random number is then multiplied with {@link layer3Offset} to get the final offset for the flare.

      This requires {@link layer3Reflection} to not be set to {@link ReflectionMode.None}.
    see:
      - layer3Reflection
      - layer3Offset
  layer3AttenuationRadius:
    field: float
    default: -1
    desc:
      This controls the radius of a sphere around the source for {@link layer3}. {@link layer3Count Each flare} has its own radius, which calculated by dividing this radius by the absolute value of the flare's {@link layer3Offset offset}. If the center of the screen is not within the projection of this sphere on the screen, the flare will not be visible, and it fades out gradually as the center of the screen moves from within the sphere to outside it.

      In other words, this fades out flares based on their offset and the distance from the source to the center of the screen, which means it's harder to see flares farther away from the source, and if the source is far away from the center of the screen.

      Can be set to -1 to disable this limit and always display the flare(s).
    see:
      - layer3Reflection
      - layer3Offset
      - layer3OffsetVariation
  layer4Count:
    field: int
    default: 1
    desc: |
      The number of flares to create from {@link layer4}. Unless given {@link layer4OffsetVariation random offsets}, they will all just stack on top of each other in the same spot.

      Setting it to very high values can have a significant impact on performance.
    see:
      - layer4ScaleVariationX
      - layer4ScaleVariationY
      - layer4Reflection
      - layer4Offset
      - layer4OffsetVariation
  layer4ScaleVariationX:
    field: float
    default: 1
    desc: |
      The {@link layer4Width width} of {@link layer4Count each flare} is multiplied by a random value between this and 1.
    see:
      - layer4Count
      - layer4UniformScale
      - layer4ScaleVariationY
  layer4ScaleVariationY:
    field: float
    default: 1
    desc: |
      The {@link layer4Height height} of {@link layer4Count each flare} is multiplied by a random value between this and 1.
    see:
      - layer4Count
      - layer4UniformScale
      - layer4ScaleVariationX
  layer4UniformScale:
    field: bool
    default: false
    desc: |
      When enabled, the {@link layer4Width layer's width} also controls the {@link layer4Height height}, and the height property is ignored. The same is also true for the scale variation fields.
    see:
      - layer4Width
      - layer4Height
      - layer4ScaleVariationX
      - layer4ScaleVariationX
  layer4ColorMultiplier:
    field: vec4
    components: 4
    default: [1, 1, 1, 1]
    color: true
    desc: |
      Multiplier for the {@link layer4Color layer's color}.
    see:
      - layer4Color
  layer4Reflection:
    field: int
    enum: ReflectionMode
    default: ReflectionMode.None
    desc: |
      Controls how the offset vector is calculated for {@link layer4}. See {@link ReflectionMode} for more details.
    see:
      - layer4Offset
      - layer4OffsetVariation
  layer4Offset:
    field: float
    desc: |
      Controls where the lens flare(s) from {@link layer4} will appear on the screen relative to the source and the center of the screen.

      This is basically a scalar multiplier for the {@link layer4Reflection offset vector}.

      This requires {@link layer4Reflection} to not be set to {@link ReflectionMode.None}.
    see:
      - layer4Reflection
      - layer4OffsetVariation
      - layer4AttenuationRadius
  layer4OffsetVariation:
    field: float
    default: 1
    desc: |
      For {@link layer4Count each flare} of {@link layer4}, a random number is picked between this value and 1, and this random number is then multiplied with {@link layer4Offset} to get the final offset for the flare.

      This requires {@link layer4Reflection} to not be set to {@link ReflectionMode.None}.
    see:
      - layer4Reflection
      - layer4Offset
  layer4AttenuationRadius:
    field: float
    default: -1
    desc:
      This controls the radius of a sphere around the source for {@link layer4}. {@link layer4Count Each flare} has its own radius, which calculated by dividing this radius by the absolute value of the flare's {@link layer4Offset offset}. If the center of the screen is not within the projection of this sphere on the screen, the flare will not be visible, and it fades out gradually as the center of the screen moves from within the sphere to outside it.

      In other words, this fades out flares based on their offset and the distance from the source to the center of the screen, which means it's harder to see flares farther away from the source, and if the source is far away from the center of the screen.

      Can be set to -1 to disable this limit and always display the flare(s).
    see:
      - layer4Reflection
      - layer4Offset
      - layer4OffsetVariation
  unk_er_f1_57:
    field: int
    default: 1
  bloom:
    field: bool
    default: false
    desc: |
      When enabled, this allows the lens flare to have a bloom effect.

      Does not seem to work in Sekiro.
    see:
      - layer1BloomColor
      - layer2BloomColor
      - layer3BloomColor
      - layer4BloomColor
  layer1BloomColor:
    field: vec4
    components: 4
    default: [1, 1, 1, 1]
    color: true
    desc: |
       The bloom color for layer 1. This is multiplied with the {@link layer1Color layer's color} to get the final color for the bloom.
    see:
      - bloom
      - layer1Color
  layer2BloomColor:
    field: vec4
    components: 4
    default: [1, 1, 1, 1]
    color: true
    desc: |
      The bloom color for layer 2. This is multiplied with the {@link layer2Color layer's color} to get the final color for the bloom.
    see:
      - bloom
      - layer2Color
  layer3BloomColor:
    field: vec4
    components: 4
    default: [1, 1, 1, 1]
    color: true
    desc: |
      The bloom color for layer 3. This is multiplied with the {@link layer3Color layer's color} to get the final color for the bloom.
    see:
      - bloom
      - layer3Color
  layer4BloomColor:
    field: vec4
    components: 4
    default: [1, 1, 1, 1]
    color: true
    desc: |
      The bloom color for layer 4. This is multiplied with the {@link layer4Color layer's color} to get the final color for the bloom.
    see:
      - bloom
      - layer4Color
  unk_ac6_f1_75:
    field: float
    default: -1
  unk_ac6_f1_76:
    field: float
    default: -1
  unk_ac6_f1_77:
    field: float
    default: -1
  unk_ac6_f1_78:
    field: float
    default: -1
  unk_ac6_f1_79:
    field: float
    default: -1
  unk_ac6_f1_80:
    field: float
    default: -1
  unk_er_f2_0:
    field: int
  unk_er_f2_1:
    field: int
  unk_er_f2_2:
    field: int
  unk_er_f2_3:
    field: int
  unk_er_f2_4:
    field: int
  unk_er_f2_5:
    field: int
  unk_er_f2_6:
    field: int
  unk_er_f2_7:
    field: int
  unk_er_f2_8:
    field: int
  unk_er_f2_9:
    field: int
  unk_er_f2_10:
    field: int
  unk_er_f2_11:
    field: int
  unk_er_f2_12:
    field: int
  unk_er_f2_13:
    field: int
  unk_er_f2_14:
    field: int
  unk_er_f2_15:
    field: int
  unk_er_f2_16:
    field: int
  unk_er_f2_17:
    field: int
  unk_er_f2_18:
    field: int
  unk_er_f2_19:
    field: int
  unk_er_f2_20:
    field: int
  unk_er_f2_21:
    field: int
  unk_er_f2_22:
    field: int
  unk_er_f2_23:
    field: int
  unk_er_f2_24:
    field: int
  unk_er_f2_25:
    field: int
  unk_er_f2_26:
    field: int
  unk_er_f2_27:
    field: int
  unk_er_f2_28:
    field: int
  unk_er_f2_29:
    field: int
  unk_er_f2_30:
    field: int
  unk_er_f2_31:
    field: int
  unk_er_f2_32:
    field: int
  unk_er_f2_33:
    field: int
  unk_er_f2_34:
    field: int
  unk_er_f2_35:
    field: int
  unk_er_f2_36:
    field: int
    default: -2
games:
  SDT: ER # This action works in Sekiro, but it's not used in vanilla
  ER:
    fields1:
      - layer1
      - layer2
      - layer3
      - layer4
      - blendMode
      - unk_er_f1_4
      - sourceSize
      - opacityTransitionDuration
      - unk_er_f1_8
      - layer1Count
      - layer1ScaleVariationX
      - layer1ScaleVariationY
      - layer1UniformScale
      - layer1ColorMultiplier
      #
      #
      #
      - layer1Reflection
      - layer1Offset
      - layer1OffsetVariation
      - layer1AttenuationRadius
      - layer2Count
      - layer2ScaleVariationX
      - layer2ScaleVariationY
      - layer2UniformScale
      - layer2ColorMultiplier
      #
      #
      #
      - layer2Reflection
      - layer2Offset
      - layer2OffsetVariation
      - layer2AttenuationRadius
      - layer3Count
      - layer3ScaleVariationX
      - layer3ScaleVariationY
      - layer3UniformScale
      - layer3ColorMultiplier
      #
      #
      #
      - layer3Reflection
      - layer3Offset
      - layer3OffsetVariation
      - layer3AttenuationRadius
      - layer4Count
      - layer4ScaleVariationX
      - layer4ScaleVariationY
      - layer4UniformScale
      - layer4ColorMultiplier
      #
      #
      #
      - layer4Reflection
      - layer4Offset
      - layer4OffsetVariation
      - layer4AttenuationRadius
      - unk_er_f1_57
      - bloom
      - layer1BloomColor
      #
      #
      #
      - layer2BloomColor
      #
      #
      #
      - layer3BloomColor
      #
      #
      #
      - layer4BloomColor
      #
      #
      #
    fields2:
      - unk_er_f2_0
      - unk_er_f2_1
      - unk_er_f2_2
      - unk_er_f2_3
      - unk_er_f2_4
      - unk_er_f2_5
      - unk_er_f2_6
      - unk_er_f2_7
      - unk_er_f2_8
      - unk_er_f2_9
      - unk_er_f2_10
      - unk_er_f2_11
      - unk_er_f2_12
      - unk_er_f2_13
      - unk_er_f2_14
      - unk_er_f2_15
      - unk_er_f2_16
      - unk_er_f2_17
      - unk_er_f2_18
      - unk_er_f2_19
      - unk_er_f2_20
      - unk_er_f2_21
      - unk_er_f2_22
      - unk_er_f2_23
      - unk_er_f2_24
      - unk_er_f2_25
      - unk_er_f2_26
      - unk_er_f2_27
      - unk_er_f2_28
      - unk_er_f2_29
      - unk_er_f2_30
      - unk_er_f2_31
      - unk_er_f2_32
      - unk_er_f2_33
      - unk_er_f2_34
      - unk_er_f2_35
      - unk_er_f2_36
    properties1:
      - layer1Width
      - layer1Height
      - layer1Color
      - layer2Width
      - layer2Height
      - layer2Color
      - layer3Width
      - layer3Height
      - layer3Color
      - layer4Width
      - layer4Height
      - layer4Color
  AC6:
    fields1:
      - layer1
      - layer2
      - layer3
      - layer4
      - blendMode
      - unk_er_f1_4
      - sourceSize
      - opacityTransitionDuration
      - unk_er_f1_8
      - layer1Count
      - layer1ScaleVariationX
      - layer1ScaleVariationY
      - layer1UniformScale
      - layer1ColorMultiplier
      #
      #
      #
      - layer1Reflection
      - layer1Offset
      - layer1OffsetVariation
      - layer1AttenuationRadius
      - layer2Count
      - layer2ScaleVariationX
      - layer2ScaleVariationY
      - layer2UniformScale
      - layer2ColorMultiplier
      #
      #
      #
      - layer2Reflection
      - layer2Offset
      - layer2OffsetVariation
      - layer2AttenuationRadius
      - layer3Count
      - layer3ScaleVariationX
      - layer3ScaleVariationY
      - layer3UniformScale
      - layer3ColorMultiplier
      #
      #
      #
      - layer3Reflection
      - layer3Offset
      - layer3OffsetVariation
      - layer3AttenuationRadius
      - layer4Count
      - layer4ScaleVariationX
      - layer4ScaleVariationY
      - layer4UniformScale
      - layer4ColorMultiplier
      #
      #
      #
      - layer4Reflection
      - layer4Offset
      - layer4OffsetVariation
      - layer4AttenuationRadius
      - unk_er_f1_57
      - bloom
      - layer1BloomColor
      #
      #
      #
      - layer2BloomColor
      #
      #
      #
      - layer3BloomColor
      #
      #
      #
      - layer4BloomColor
      #
      #
      #
      - unk_ac6_f1_75
      - unk_ac6_f1_76
      - unk_ac6_f1_77
      - unk_ac6_f1_78
      - unk_ac6_f1_79
      - unk_ac6_f1_80
    fields2: ER
    properties1: ER
