type: 10015
name: RichModel
slot: Appearance
desc: |
  Particle with a 3D model. Similar to {@link ActionType.Model Model}, but with some different options and seemingly no way to change the blend mode.

  Some models only work properly with this action and not with the Model action for some unknown reason. A good example of this is the Carian greatsword model in Elden Ring (88300), which gets horribly stretched and distorted when used with the other action, but it works fine with this one.
properties:
  orientation:
    type: RichModelOrientationMode
    field: int
    default: RichModelOrientationMode.ParticleDirection
    desc: |
      Rich model orientation mode. See {@link RichModelOrientationMode} for more information.
  scaleVariationX:
    field: float
    default: 1
    desc: |
      Each particle will pick a random number between this value and 1, and the width of the particle will be multiplied by this number. For example, setting this to 0.5 will make the particles randomly thinner, down to half width. Setting it to 2 will make them randomly wider, up to double width.

      If {@link uniformScale} is enabled, this also affects the height.
    see:
      - scaleVariationY
      - scaleVariationZ
  scaleVariationY:
    field: float
    default: 1
    desc: |
      Each particle will pick a random number between this value and 1, and the height of the particle will be multiplied by this number. For example, setting this to 0.5 will make the particles randomly shorter, down to half height. Setting it to 2 will make them randomly taller, up to double height.

      If {@link uniformScale} is enabled, {@link scaleVariationX} also affects the height, and this field is ignored.
    see:
      - scaleVariationX
      - scaleVariationZ
  scaleVariationZ:
    field: float
    default: 1
    desc: |
      Each particle will pick a random number between this value and 1, and the depth of the particle will be multiplied by this number. For example, setting this to 0.5 will make the particles randomly shallower, down to half depth. Setting it to 2 will make them randomly deeper, up to double depth. 

      If {@link uniformScale} is enabled, {@link scaleVariationX} also affects the depth, and this field is ignored.
    see:
      - scaleVariationX
      - scaleVariationY
  uniformScale:
    field: bool
    default: false
    desc: |
      If enabled, the particle X scale-related properties and fields will control the scale in all axes, and the Y and Z counterparts will be ignored.
    see:
      - sizeX
      - sizeY
      - sizeZ
      - scaleVariationX
      - scaleVariationY
      - scaleVariationZ
  bloomColor:
    field: vec4
    default: [1, 1, 1, 0]
    color: true
    desc: |
      Controls the color of the additional bloom effect. The colors of the particle will be multiplied with this color to get the final color of the bloom effect.

      Note:
      - This has no effect if the "Effects Quality" setting is set to "Low".
      - This does not affect the natural bloom effect from high color values.
  model:
    type: ScalarValue
    default: 80201
    argument: Constant0
    resource: model
    desc: |
      Model ID.
  sizeX:
    type: ScalarValue
    default: 1
    argument: ParticleAge
    scale: true
    desc: |
      The width of the particle.

      If {@link uniformScale} is enabled, this also controls the height and depth.
    see:
      - scaleVariationX
      - sizeY
      - sizeZ
  sizeY:
    type: ScalarValue
    default: 1
    argument: ParticleAge
    scale: true
    desc: |
      The height of the particle.

      If {@link uniformScale} is enabled, {@link sizeX} also controls the height, and this property is ignored.
    see:
      - scaleVariationY
      - sizeX
      - sizeZ
  sizeZ:
    type: ScalarValue
    default: 1
    argument: ParticleAge
    scale: true
    desc: |
      The depth of the particle.

      If {@link uniformScale} is enabled, {@link sizeX} also controls the depth, and this property is ignored.
    see:
      - scaleVariationZ
      - sizeX
      - sizeY
  rotationX:
    type: ScalarValue
    argument: Constant0
    desc: |
      Rotation around the X-axis in degrees.
    see:
      - angularSpeedX
      - angularSpeedMultiplierX
  rotationY:
    type: ScalarValue
    argument: Constant0
    desc: |
      Rotation around the Y-axis in degrees.
    see:
      - angularSpeedY
      - angularSpeedMultiplierY
  rotationZ:
    type: ScalarValue
    argument: Constant0
    desc: |
      Rotation around the Z-axis in degrees.
    see:
      - angularSpeedZ
      - angularSpeedMultiplierZ
  angularSpeedX:
    type: ScalarValue
    argument: ParticleAge
    time: true
    desc: |
      Angular speed around the X-axis in degrees per second.
    see:
      - rotationX
      - angularSpeedMultiplierX
  angularSpeedY:
    type: ScalarValue
    argument: ParticleAge
    time: true
    desc: |
      Angular speed around the Y-axis in degrees per second.
    see:
      - rotationY
      - angularSpeedMultiplierY
  angularSpeedZ:
    type: ScalarValue
    argument: ParticleAge
    time: true
    desc: |
      Angular speed around the Z-axis in degrees per second.
    see:
      - rotationZ
      - angularSpeedMultiplierZ
  angularSpeedMultiplierX:
    type: ScalarValue
    default: 1
    argument: ParticleAge
    desc: |
      Multiplier for {@link angularSpeedX}.
    see:
      - rotationX
  angularSpeedMultiplierY:
    type: ScalarValue
    default: 1
    argument: ParticleAge
    desc: |
      Multiplier for {@link angularSpeedY}.
    see:
      - rotationY
  angularSpeedMultiplierZ:
    type: ScalarValue
    default: 1
    argument: ParticleAge
    desc: |
      Multiplier for {@link angularSpeedZ}.
    see:
      - rotationZ
  color1:
    type: Vector4Value
    default: [1, 1, 1, 1]
    argument: ParticleAge
    color: true
    desc: |
      Color multiplier for the particle.
  color2:
    type: Vector4Value
    default: [1, 1, 1, 1]
    argument: EmissionTime
    color: true
    desc: |
      Color multiplier for the particle.
  color3:
    type: Vector4Value
    default: [1, 1, 1, 1]
    argument: ParticleAge
    color: true
    desc: |
      Color multiplier for the particle.
  uOffset:
    omitClassProp: true
    type: ScalarValue
    default: 0
    argument: Constant0
    desc: |
      Horizontal offset for the UV coordinates of the model.
    see:
      - uSpeed
      - vOffset
  vOffset:
    omitClassProp: true
    type: ScalarValue
    default: 0
    argument: Constant0
    desc: |
      Vertical offset for the UV coordinates of the model.
  uSpeed:
    omitClassProp: true
    type: ScalarValue
    default: 0
    argument: ParticleAge
    desc: |
      Horiztonal scroll speed for the model's texture.
    see:
      - uSpeedMultiplier
      - uOffset
  uSpeedMultiplier:
    omitClassProp: true
    type: ScalarValue
    default: 0
    argument: ParticleAge
    desc: |
      Multiplier for {@link uSpeed}.
  vSpeed:
    omitClassProp: true
    type: ScalarValue
    default: 0
    argument: ParticleAge
    desc: |
      Vertical scroll speed for the model's texture.
    see:
      - vSpeedMultiplier
      - vOffset
  vSpeedMultiplier:
    omitClassProp: true
    type: ScalarValue
    default: 0
    argument: ParticleAge
    desc: |
      Multiplier for {@link vSpeed}.
  rgbMultiplier:
    type: ScalarValue
    default: 1
    argument: EffectAge
    desc: |
      Scalar multiplier for the color that does not affect the alpha. Effectively a brightness multiplier.
  alphaMultiplier:
    type: ScalarValue
    default: 1
    argument: EffectAge
    desc: |
      Alpha multiplier.
  anibnd:
    field: int
    resource: anibnd
    desc: |
      Anibnd ID.
    see:
      - animation
      - loopAnimation
      - animationSpeed
  animation:
    field: int
    desc: |
      Controls which animation in the {@link anibnd} to play.
    see:
      - anibnd
      - loopAnimation
      - animationSpeed
  loopAnimation:
    field: bool
    default: true
    desc: |
      If disabled, the {@link animation} will only play once and then freeze on the last frame. If enabled, the animation will loop.
    see:
      - anibnd
      - animation
      - animationSpeed
  animationSpeed:
    field: float
    default: 1
    time: true
    desc: |
      Controls the speed at which the {@link animation} plays.
    see:
      - anibnd
      - animation
      - loopAnimation
  unk_er_f1_5:
    field: int
    default: 1
  unk_er_f1_6:
    field: int
    default: 1
  unk_er_f1_7:
    field: int
  unk_er_f1_8:
    field: int
    default: -2
  unk_er_f1_9:
    field: int
    default: -2
  unk_er_f1_14:
    field: float
  unk_er_f1_15:
    field: int
  unk_er_f1_16:
    field: int
  unk_er_f1_17:
    field: int
  unk_er_f1_18:
    field: int
  unk_er_f1_19:
    field: int
  unk_er_f1_20:
    field: int
  unk_er_f1_21:
    field: int
  unk_er_f1_22:
    field: int
  unk_er_f1_23:
    field: int
  unk_er_f1_24:
    field: float
  unk_er_f1_25:
    field: int
    default: 1
  unk_er_f2_0:
    field: int
  unk_er_f2_1:
    field: int
  unk_er_f2_2:
    field: int
    default: 8
  unk_er_f2_3:
    field: int
  unk_er_f2_8:
    field: int
  unk_er_f2_9:
    field: int
  unk_er_f2_10:
    field: int
  unk_er_f2_11:
    field: int
  unk_er_f2_12:
    field: int
  unk_er_f2_13:
    field: int
  minDistance:
    field: float
    default: -1
    scale: ifNotMinusOne
    desc: |
      Minimum view distance. If a particle is closer than this distance from the camera, it will be hidden. Can be set to -1 to disable the limit.

      This requires {@link minFadeDistance} to be set to something other than -1.

      This is different from {@link minDistanceThreshold}, as this controls the start of a distance range that has smooth transitions at each end, while the threshold value is a hard cut-off.
    see:
      - minFadeDistance
      - maxFadeDistance
      - maxDistance
      - minDistanceThreshold
      - maxDistanceThreshold
  minFadeDistance:
    field: float
    default: -1
    scale: ifNotMinusOne
    desc: |
      This controls a point where the opacity of a particle will start to fade to 0 near the {@link minDistance minimum view distance}. At {@link minDistance}, the opacity will be 0, and it will linearly approach 1 as the distance between the camera and the particle approaches this distance.

      This requires {@link minDistance} to be set to something other than -1. This distance limit can be disabled by setting this and minDistance to -1.
    see:
      - minDistance
      - maxFadeDistance
      - maxDistance
      - minDistanceThreshold
      - maxDistanceThreshold
  maxFadeDistance:
    field: float
    default: -1
    scale: ifNotMinusOne
    desc: |
      This controls a point where the opacity of a particle will start to fade to 0 near the {@link maxDistance maximum view distance}. At {@link maxDistance}, the opacity will be 0, and it will linearly approach 1 as the distance between the camera and the particle approaches this distance.

      This requires {@link maxDistance} to be set to something other than -1. This distance limit can be disabled by setting this and minDistance to -1.
    see:
      - minFadeDistance
      - minDistance
      - maxDistance
      - minDistanceThreshold
      - maxDistanceThreshold
  maxDistance:
    field: float
    default: -1
    scale: ifNotMinusOne
    desc: |
      Minimum view distance. If a particle is farther away than this distance from the camera, it will be hidden. Can be set to -1 to disable the limit.

      This requires {@link maxFadeDistance} to be set to something other than -1.

      This is different from {@link maxDistanceThreshold}, as this controls the start of a distance range that has smooth transitions at each end, while the threshold value is a hard cut-off.
    see:
      - minFadeDistance
      - minDistance
      - maxFadeDistance
      - minDistanceThreshold
      - maxDistanceThreshold
  minDistanceThreshold:
    field: float
    default: -1
    scale: ifNotMinusOne
    desc: |
      A hard cut-off point for the distance between the camera and the particle. If a particle is closer than this distance from the camera, it will be hidden. Can be set to -1 to disable the limit.
    see:
      - minFadeDistance
      - minDistance
      - maxFadeDistance
      - maxDistance
      - maxDistanceThreshold
  maxDistanceThreshold:
    field: float
    default: -1
    scale: ifNotMinusOne
    desc: |
      A hard cut-off point for the distance between the camera and the particle. If a particle is farther away than this distance from the camera, it will be hidden. Can be set to -1 to disable the limit.
    see:
      - minFadeDistance
      - minDistance
      - maxFadeDistance
      - maxDistance
      - minDistanceThreshold
  unk_er_f2_20:
    field: int
  unk_er_f2_21:
    field: int
  unk_er_f2_22:
    field: int
  unk_er_f2_23:
    field: int
  unk_er_f2_24:
    field: int
  unkDepthBlend1:
    field: float
    default: 1
  unkDepthBlend2:
    field: float
    scale: true
  unk_er_f2_27:
    field: int
  unk_er_f2_28:
    field: int
    default: 1
  unk_er_f2_29:
    field: int
  unk_er_f2_30:
    field: int
  unk_er_f2_31:
    field: float
    default: 1
  unk_er_f2_32:
    field: int
  unk_er_f2_33:
    field: int
  unk_er_f2_34:
    field: float
    default: 0.5
  unk_er_f2_35:
    field: int
    default: -2
  unk_er_f2_36:
    field: int
    default: -2
  unk_er_f2_37:
    field: int
  unk_er_p1_16:
    type: ScalarValue
  unk_er_p1_17:
    type: ScalarValue
  rgbMultiplier2:
    type: ScalarValue
    default: 1
    argument: EffectAge
    desc: |
      Seemingly identical to {@link rgbMultiplier}?
  unk_er_p1_19:
    type: ScalarValue
  unk_er_p1_20:
    type: ScalarValue
  unk_er_p2_2:
    type: ScalarValue
  unk_er_p2_3:
    type: Vector4Value
    default: [1, 1, 1, 1]
  unk_er_p2_4:
    type: Vector4Value
    default: [1, 1, 1, 1]
  unk_er_p2_5:
    type: Vector4Value
    default: [1, 1, 1, 1]
  unk_er_p2_6:
    type: ScalarValue
  unk_ac6_f1_24:
    field: float
  unk_ac6_f1_25:
    field: float
    default: -1
  unk_ac6_f1_26:
    field: float
    default: -1
  unk_ac6_f1_27:
    field: float
    default: -1
  unk_ac6_f1_28:
    field: float
    default: -1
  unk_ac6_f1_29:
    field: int
  unk_ac6_f1_30:
    field: int
  unk_ac6_f1_31:
    field: float
  unk_ac6_f1_32:
    field: int
  unk_ac6_f1_33:
    field: int
    default: 1
  unk_ac6_f1_34:
    field: int
  uvOffset:
    type: Vector2Value
    default: [0, 0]
    argument: Constant0
    desc: |
      Offset for the UV coordinates of the model.
    see:
      - uvSpeed
  uvSpeed:
    type: Vector2Value
    default: [0, 0]
    argument: ParticleAge
    time: true
    desc: |
      Scroll speed for the model's texture.
    see:
      - uvSpeedMultiplier
  uvSpeedMultiplier:
    type: Vector2Value
    default: [1, 1]
    argument: ParticleAge
    desc: |
      Multiplier for {@link uvSpeed}
games:
  ER:
    fields1:
      - orientation
      - scaleVariationX
      - scaleVariationY
      - scaleVariationZ
      - uniformScale
      - unk_er_f1_5
      - unk_er_f1_6
      - unk_er_f1_7
      - unk_er_f1_8
      - unk_er_f1_9
      - anibnd
      - animation
      - loopAnimation
      - animationSpeed
      - unk_er_f1_14
      - unk_er_f1_15
      - unk_er_f1_16
      - unk_er_f1_17
      - unk_er_f1_18
      - unk_er_f1_19
      - unk_er_f1_20
      - unk_er_f1_21
      - unk_er_f1_22
      - unk_er_f1_23
      - unk_er_f1_24
      - unk_er_f1_25
    fields2:
      - unk_er_f2_0
      - unk_er_f2_1
      - unk_er_f2_2
      - unk_er_f2_3
      - bloomColor
      #
      #
      #
      - unk_er_f2_8
      - unk_er_f2_9
      - unk_er_f2_10
      - unk_er_f2_11
      - unk_er_f2_12
      - unk_er_f2_13
      - minFadeDistance
      - minDistance
      - maxFadeDistance
      - maxDistance
      - minDistanceThreshold
      - maxDistanceThreshold
      - unk_er_f2_20
      - unk_er_f2_21
      - unk_er_f2_22
      - unk_er_f2_23
      - unk_er_f2_24
      - unkDepthBlend1
      - unkDepthBlend2
      - unk_er_f2_27
      - unk_er_f2_28
      - unk_er_f2_29
      - unk_er_f2_30
      - unk_er_f2_31
      - unk_er_f2_32
      - unk_er_f2_33
      - unk_er_f2_34
      - unk_er_f2_35
      - unk_er_f2_36
      - unk_er_f2_37
    properties1:
      - model
      - sizeX
      - sizeY
      - sizeZ
      - rotationX
      - rotationY
      - rotationZ
      - angularSpeedX
      - angularSpeedMultiplierX
      - angularSpeedY
      - angularSpeedMultiplierY
      - angularSpeedZ
      - angularSpeedMultiplierZ
      - color1
      - color2
      - color3
      - unk_er_p1_16
      - unk_er_p1_17
      - rgbMultiplier2
      - unk_er_p1_19
      - unk_er_p1_20
      - uOffset
      - vOffset
      - uSpeed
      - uSpeedMultiplier
      - vSpeed
      - vSpeedMultiplier
    properties2:
      - rgbMultiplier
      - alphaMultiplier
      - unk_er_p2_2
      - unk_er_p2_3
      - unk_er_p2_4
      - unk_er_p2_5
      - unk_er_p2_6
  AC6:
    fields1:
      - orientation
      - scaleVariationX
      - scaleVariationY
      - scaleVariationZ
      - uniformScale
      - unk_er_f1_5
      - unk_er_f1_6
      - unk_er_f1_7
      - unk_er_f1_8
      - unk_er_f1_9
      - anibnd
      - animation
      - loopAnimation
      - animationSpeed
      - unk_er_f1_14
      - unk_er_f1_15
      - unk_er_f1_16
      - unk_er_f1_17
      - unk_er_f1_18
      - unk_er_f1_19
      - unk_er_f1_20
      - unk_er_f1_21
      - unk_er_f1_22
      - unk_er_f1_23
      - unk_ac6_f1_24
      - unk_ac6_f1_25
      - unk_ac6_f1_26
      - unk_ac6_f1_27
      - unk_ac6_f1_28
      - unk_ac6_f1_29
      - unk_ac6_f1_30
      - unk_ac6_f1_31
      - unk_ac6_f1_32
      - unk_ac6_f1_33
      - unk_ac6_f1_34
    fields2: ER
    properties1:
      - model
      - sizeX
      - sizeY
      - sizeZ
      - rotationX
      - rotationY
      - rotationZ
      - angularSpeedX
      - angularSpeedMultiplierX
      - angularSpeedY
      - angularSpeedMultiplierY
      - angularSpeedZ
      - angularSpeedMultiplierZ
      - color1
      - color2
      - color3
      - unk_er_p1_16
      - unk_er_p1_17
      - rgbMultiplier2
      - unk_er_p1_19
      - unk_er_p1_20
      - uvOffset
      - uvSpeed
      - uvSpeedMultiplier
    properties2: ER
